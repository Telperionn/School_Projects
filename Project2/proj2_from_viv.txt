for driver

cout << "\n\tSource vertex (v1): ";
cin >> v1;
cout << "\nThe Depth First Traversal from start " << v1 <<  " is: " << endl;
g.recursiveDFT(v1); //print recursive depth first traversal
break;


networks.t

void Graph<V, W>::DepthFirstTraversal(V& v)
{
	int index = isVertex(v); //gets index of v

	G[index].visited = 1; //sets visited of index to 1
	
	cout << v << " "; //prints v

	for (typename list<edgeRep<V, W>>::iterator it = G[index].edgelist.begin();
		it != G[index].edgelist.end(); it++) //iterator used to access edgelists
	{
		int temp = isVertex(it->name);

		if (G[temp].visited == 0) //
		{
			DepthFirstTraversal(it->name);
		}
	}	
}

void Graph<V, W>::recursiveDFT(V& v)
{
	for (int i = 0; i < G.size(); i++)
	{
		G[i].visited = 0; //set visited to 0
	}

	DepthFirstTraversal(v); //recursive call for DepthFirstTraversal
	
	cout << endl << "\nNo path found for the following vertices: " << endl;

	for (int i = 0; i < G.size(); i++)
	{
		if (G[i].visited == 0) //if no path has been found (sparse graph)
		{			
			cout << G[i].name << " ";
			break;
		}
	}
	cout << endl << endl;
}
